---
import SunIcon from "@/components/icons/SunIcon.astro";
import MoonIcon from "@/components/icons/MoonIcon.astro";
import SystemIcon from "@/components/icons/SystemIcon.astro";

const THEMES = ["Light", "Dark", "System"];
---

<div class="relative mr-1 ml-1">
  <button
    id="theme-toggle-btn"
    class="flex border-none transition appearance-none hover:scale-125"
  >
    <span class="sr-only">Elige el tema</span>
    <SunIcon
      id="light"
      class="theme-toggle-icon size-5 transition-all dark:hover:text-purple-400/90 hover:text-purple-600/90"
    />
    <MoonIcon
      id="dark"
      class="theme-toggle-icon size-5 absolute transition-all dark:hover:text-purple-400/90 hover:text-purple-600/90"
    />
    <SystemIcon
      id="system"
      class="theme-toggle-icon size-5 absolute transition-all dark:hover:text-purple-400/90 hover:text-purple-600/90"
    />
  </button>
  <div
    id="themes-menu"
    class="bg-white/90 min-w-[8rem] scale-80 shadow-[0_3px_10px_rgb(0,0,0,0.2)] absolute right-0 top-8 p-1 text-sm rounded-lg border border-white opacity-0 dark:bg-neutral-900/90 dark:border-neutral-500/20"
  >
    <ul class="backdrop-blur">
      {
        THEMES.map((theme) => (
          <li class="themes-menu-option px-2 py-1.5 rounded-lg cursor-pointer dark:hover:bg-neutral-500/50 hover:bg-neutral-400/40">
            {theme}
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style>
  #themes-menu.open {
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
      display: none;
    }

    to {
      transform: scale(1);
      opacity: 1;
      display: block;
    }
  }
</style>

<script is:inline>
  let remove = null;
  const matchMedia = window.matchMedia("(prefers-color-scheme: dark)");
  const themesMenu = document.getElementById("themes-menu");

  const getThemePreference = () => {
    if (typeof localStorage !== "undefined") {
      return localStorage.getItem("theme") ?? "system";
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };

  const updateIcon = (themePreference) => {
    document.querySelectorAll(".theme-toggle-icon").forEach((element) => {
      element.style.scale = element.id === themePreference ? "1" : "0";
    });
  };

  const updateTheme = () => {
    if (remove != null) {
      remove();
    }
    matchMedia.addEventListener("change", updateTheme);
    remove = () => {
      matchMedia.removeEventListener("change", updateTheme);
    };

    const themePreference = getThemePreference();
    const isDark =
      themePreference === "dark" ||
      (themePreference === "system" && matchMedia.matches);

    updateIcon(themePreference);
    if (isDark) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }
  };

  updateTheme();

  document.addEventListener("click", () => themesMenu.classList.remove("open"));

  document.getElementById("theme-toggle-btn").addEventListener("click", (e) => {
    e.stopPropagation();
    const isClosed = !themesMenu.classList.contains("open");
    if (isClosed) {
      document.getElementById("themes-menu").classList.add("open");
    } else {
      document.getElementById("themes-menu").classList.remove("open");
    }
  });

  document.querySelectorAll(".themes-menu-option").forEach((element) => {
    element.addEventListener("click", (e) => {
      localStorage.setItem("theme", e.target.innerText.toLowerCase().trim());
      updateTheme();
    });
  });
</script>
